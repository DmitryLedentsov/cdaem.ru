/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/pages/home.js":
/*!******************************!*\
  !*** ./src/js/pages/home.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function ($) {
  "use strict";
  /*=========================================================================
      Seo text
  =========================================================================*/

  $(document).on('click', '[data-seo-text]', function () {
    $(this).parent().toggleClass('txt-show');
  });
  var btnOpenFilter = document.querySelector('.search-form .search-form-filter-extra');
  var btnCloseFilter = document.querySelector('.search-form .btn-close');
  var filter = document.querySelector('.search-form .search-form-filter-options');

  if (!!btnOpenFilter && !!btnCloseFilter) {
    document.addEventListener("click", function (e) {
      if (e.target === btnOpenFilter) return btnOpenFilter.classList.toggle('is-open');
      btnOpenFilter.classList.remove('is-open');
    });
    filter.addEventListener("click", function (e) {
      return e.stopPropagation();
    });
    btnCloseFilter.addEventListener("click", function () {
      return btnOpenFilter.classList.remove('is-open');
    });
  }

  if (_typeof($(document).autoComplete) === (typeof Function === "undefined" ? "undefined" : _typeof(Function))) {
    var $searchFormAutocomplete = $('#search-form-autocomplete');
    $searchFormAutocomplete.autoComplete({
      resolver: 'custom',
      minLength: 2,
      noResultsText: 'Город не найден',
      formatResult: function formatResult(item) {
        return {
          value: item.text,
          text: item.text,
          html: '<div>' + item.text + '</div>'
        };
      },
      events: {
        search: function search(qry, callback) {
          $.getJSON($('#search-form-autocomplete').data('url'), {
            'name': qry
          }, function (data) {
            var result = [];

            for (var i in data) {
              result.push({
                value: data[i].name_eng,
                text: data[i].name
              });
            }

            callback(result);
          });
        }
      }
    });
    $searchFormAutocomplete.on('autocomplete.select', function (evt, item) {
      $('#search-form-autocomplete-selected').val(item.value);
    });
  }
})(jQuery);

/***/ }),

/***/ 5:
/*!************************************!*\
  !*** multi ./src/js/pages/home.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /app/assets/src/js/pages/home.js */"./src/js/pages/home.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,